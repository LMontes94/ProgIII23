@startuml

title ** ACME S.A.**

' Clases 

class Micro{
   - cantAsientos : Integer 
   - cantMaxParados: Integer 
   - volumen: Double
   - primerPasajero: Empleado
   - pasajerosSentados: ArrayList<Empleado>
   - pasajerosParados: ArrayList<Empleado>

   / setters y getters
   
   + subis(): void
   + subir(Empleado): void
   + bajar(Empleado): void
   + guardarPrimerPasajero(): Empleado

}

class Empleado{
  - legajo: Integer 
  - nombre: String 
  - apellido: String 
  - empleados : ArrayList<Empleados>

  // setters y getters
   + meSubo(): boolean    
   + sosJefe(): boolean 
} 



'Relaciones

Micro *-- Empleado
Empleado <|-- Claustrofobico
Empleado <|-- Fiaca 
Empleado <|-- Moderador
Empleado <|-- Obsecuente 
 
'Notas

note right of Micro::subir
Resuelve el punto 2.
Se le pasa por parametro el Empleado 
y se fija si hay espacio en el micro y consulta
al empleado si quiere subir, si es asi, sube.
end note 

note left of Micro::bajar
Resuelve el punto 3
Busco El empleado del array y lo remuevo.
end note 

note right of Micro::guardarPrimerPasajero
Este metodo resuelve el punto 4
revisa el array pasajeros sentados y pasajeros Parados
y si ambos estan nulos, me guardo este pasajero.
end note 
note right of Empleado::meSubo
Este metodo ayuda a resolver el punto 2.
end note 

note left of Empleado::sosJefe 
Este metodo resuelve el punto 1
el cual se fija si en el arrayList esta null o no.
end note 


@enduml